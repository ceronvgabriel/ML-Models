# -*- coding: utf-8 -*-
"""main_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13iOoOeXIUXuToZ7Wd8qCnFdxZVb8LSae
"""

#Gabriel Ceron gaboceron10@gmail.com

"""#Import"""

# Commented out IPython magic to ensure Python compatibility.

#Changing current di to desired to desired dir, not needed if working locally
# %cd /content/drive/My Drive/Colab\ Notebooks/MLPR/PROJECT_v4
#!ls

# Commented out IPython magic to ensure Python compatibility.
#Run if you want to autoreload your personal modules on change
# %load_ext autoreload
# %autoreload 2

# import sys
# sys.modules.clear()

import numpy
import numpy as np
import scipy
import matplotlib.pyplot as plt

import utils
import pca
import cross_val as cv
import dcf

#Models
import gaussian_def as gd
import logistic_def as log
import gmm_log_def as gmm
import svm_k_def as svm

dataset="banknote"
if dataset=="banknote":
  TR = numpy.loadtxt('dataBanknote/Train.txt',delimiter=',')
  TE = numpy.loadtxt('dataBanknote/Test.txt',delimiter=',')
if dataset=="banknoteH":
  TR = numpy.loadtxt('dataBanknote/TrainH.txt',delimiter=',')
  TE = numpy.loadtxt('dataBanknote/TestH.txt',delimiter=',')

np.random.seed(0)

np.random.shuffle(TR)
np.random.shuffle(TE)

DTR=TR[:,:-1] #675;4
LTR=TR[:,-1]
DTE=TE[:,:-1] #697;4
LTE=TE[:,-1]

"""#Descriptive Stats"""

class0DTR = DTR[LTR == 0]
class1DTR = DTR[LTR == 1]
class0DTE = DTE[LTE == 0]
class1DTE = DTE[LTE == 1]

#Training set balance
len(class0DTR)/len(LTR)

#Test set balance
len(class0DTE)/len(LTE)

#Stats for  DTR
arr=DTR
# measures of central tendency
mean = np.mean(arr,axis=0)
median = np.median(arr,axis=0)
  
# measures of dispersion
min = np.amin(arr,axis=0)
max = np.amax(arr,axis=0)
range = np.ptp(arr,axis=0)
varience = np.var(arr,axis=0)
sd = np.std(arr,axis=0)
  
print("Mean =", mean)
print("Minimum =", min)
print("Maximum =", max)
print("StdDev =", sd)

corr_matrix=numpy.corrcoef(TR.T)
plt.imshow(corr_matrix, cmap='seismic',vmin=-1, vmax=1,extent=[0.5,5.5,5.5,0.5])
plt.colorbar()
plt.title("Training Data Correlation Matrix")
plt.show()

myPca=pca.pca(4)
myPca.fit(DTR)
DTR_p3=myPca.transform(DTR)
DTE_p3=myPca.transform(DTE)

corr_matrix=numpy.corrcoef(DTR_p3.T)
plt.imshow(corr_matrix, cmap='seismic',vmin=-1, vmax=1)
plt.colorbar()
plt.title("Correlation Matrix")
plt.show()

corr_matrix

#Stats for gaussianized data
myGauss=utils.Gauss_trans()
myGauss.fit(DTR)
DTR_g=myGauss.trans(DTR)
DTE_g=myGauss.trans(DTE)

corr_matrix=numpy.corrcoef(DTR_g.T)
plt.imshow(corr_matrix, cmap='seismic',vmin=-1, vmax=1)
plt.colorbar()
plt.title("Correlation Matrix")
plt.show()

utils.hist_class_all(DTR.T,LTR,b=50)

myPca=pca.pca(3)
myPca.fit(DTR)
DTR_p3=myPca.transform(DTR)
DTE_p3=myPca.transform(DTE)

utils.hist_class_all(DTR_p3.T,LTR,b=50)

#Stats for gaussianized data
myGauss=utils.Gauss_trans()
myGauss.fit(DTR)
DTR_g=myGauss.trans(DTR)
DTE_g=myGauss.trans(DTE)

utils.hist_class_all(DTR_g.T,LTR)



"""#Logistic Regression"""

#Try different values of lamda with cross validation and different preprocessing
model="logReg"
#Select a working point, iterate for different values of lambda
t=[0.5,1,1]

width=50

param_list=list(map(lambda x: 10**(x-(width/2)),list(range(width))))

minDCFn_v=[]
minDCFn_v_p3=[]
minDCFn_v_g=[]

n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t,params={"reg":param})
  minDCFn_v.append(minDCFn)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,prepro="pca3",K=10,t=t,params={"reg":param})
  minDCFn_v_p3.append(minDCFn)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,prepro="gauss",K=10,t=t,params={"reg":param})
  minDCFn_v_g.append(minDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v,label="raw")
ax.plot(param_list,minDCFn_v_p3,label="pca3")
ax.plot(param_list,minDCFn_v_g,label="gauss")
ax.set_xscale("log")
ax.set(xlabel='Lambda', ylabel='minDCFn')
ax.legend()
ax.set_title("Logistic Regression")

#Try different values of lamda with cross validation
model="logReg"
#Select a working point, iterate for different values of lambda
t=[0.5,1,1]

width=50

param_list=list(map(lambda x: 10**(x-(width/2)),list(range(width))))

minDCFn_v=[]
actDCFn_v=[]
n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t,params={"reg":param})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v)
ax.set_xscale("log")
ax.set(xlabel='Lambda', ylabel='minDCFn')
ax.set_title("Logistic Regression")

fig, ax = plt.subplots()
ax.plot(param_list,actDCFn_v)
ax.set_xscale("log")
ax.set(xlabel='Lambda', ylabel='actDCFn')
ax.set_title("Logistic Regression")

#Try applications
model="logReg"

t=[0.5,1,1]
pi_v=[0.5,0.9,0.1]

minDCFn_v_=[]
actDCFn_v=[]
minDCFn_v_g=[]
actDCFn_v_g=[]
minDCFn_v_p3=[]
actDCFn_v_p3=[]

for pi in pi_v:
  t=[pi,1,1]
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t,params={"reg":0})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,prepro="gauss",K=10,t=t,params={"reg":0})
  minDCFn_v_g.append(minDCFn)
  actDCFn_v_g.append(actDCFn)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,prepro="pca3",K=10,t=t,params={"reg":0})
  minDCFn_v_p3.append(minDCFn)
  actDCFn_v_p3.append(actDCFn)

#Print as format in report:
print(". RAW Gauss PCA3")
for i,pi in enumerate(pi_v):
  print("pi =",pi)
  print("minDCFn","%.4f" % minDCFn_v[i],"%.4f" % minDCFn_v_g[i], "%.4f" % minDCFn_v_p3[i])
  print("actDCFn","%.4f" %actDCFn_v[i],"%.4f" % actDCFn_v_g[i],"%.4f" % actDCFn_v_p3[i])

"""# Multivaraite Gaussian"""

# cv for different gaussian models

t=[0.5,1,1]
mvg_v=[]
mvg_a=[]

model="gaussFull"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t)
mvg_v.append(minDCFn)
mvg_a.append(actDCFn)

model="gaussTied"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t)
mvg_v.append(minDCFn)
mvg_a.append(actDCFn)

model="gaussNaive"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t)
mvg_v.append(minDCFn)
mvg_a.append(actDCFn)

print(mvg_v)
print(mvg_a)

# cv for pca 3

mvg_f=[]
mvg_t=[]
mvg_n=[]
mvg_f_g=[]
mvg_t_g=[]
mvg_n_g=[]
mvg_f_p3=[]
mvg_t_p3=[]
mvg_n_p3=[]

pi_v=[0.5,0.9,0.1]

for pi in pi_v:
  t=[pi,1,1]
  model="gaussFull"
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t)
  mvg_f.append(minDCFn)

  model="gaussTied"
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t)
  mvg_t.append(minDCFn)

  model="gaussNaive"
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t)
  mvg_n.append(minDCFn)

  model="gaussFull"
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="gauss",model=model,K=10,t=t)
  mvg_f_g.append(minDCFn)

  model="gaussTied"
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="gauss",model=model,K=10,t=t)
  mvg_t_g.append(minDCFn)

  model="gaussNaive"
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="gauss",model=model,K=10,t=t)
  mvg_n_g.append(minDCFn)

  model="gaussFull"
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="pca3",model=model,K=10,t=t)
  mvg_f_p3.append(minDCFn)

  model="gaussTied"
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="pca3",model=model,K=10,t=t)
  mvg_t_p3.append(minDCFn)

  model="gaussNaive"
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="pca3",model=model,K=10,t=t)
  mvg_n_p3.append(minDCFn)

for i,pi in enumerate(pi_v):
  print("pi =",pi)
  print("FullCov","%.4f" % mvg_f[i],"%.4f" % mvg_f_g[i], "%.4f" % mvg_f_p3[i])
  print("TiedCov","%.4f" %mvg_t[i],"%.4f" % mvg_t_g[i],"%.4f" % mvg_t_p3[i])
  print("NaiveCov","%.4f" %mvg_n[i],"%.4f" % mvg_n_g[i],"%.4f" % mvg_n_p3[i])

"""#SVM"""

#Try different values of C, for rbf kernel g=10, different preprocessing
model="svm"
#Select a working point, iterate for different values of regulazation
t=[0.5,1,1]

#width centered on 1(10**0)
width=20

param_list=list(map(lambda x: 10**(x-(width/2)),list(range(width))))


minDCFn_v=[]
minDCFn_v_p3=[]
minDCFn_v_g=[]

n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,t=t,params={"C_":param})
  minDCFn_v.append(minDCFn)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,prepro="pca3",t=t,params={"C_":param})
  minDCFn_v_p3.append(minDCFn)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,prepro="gauss",t=t,params={"C_":param})
  minDCFn_v_g.append(minDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v,label="raw")
ax.plot(param_list,minDCFn_v_p3,label="pca3")
ax.plot(param_list,minDCFn_v_g,label="gauss")
ax.set_xscale("log")
ax.set(xlabel='C', ylabel='minDCFn')
ax.legend()
ax.set_title("SVM RBF G=10")

#Try different values of C, for rbf kernel
model="svm"
#Select a working point, iterate for different values of regulazation
t=[0.5,1,1]

#width centered on 1(10**0)
width=20

param_list=list(map(lambda x: 10**(x-(width/2)),list(range(width))))

minDCFn_v=[]
actDCFn_v=[]
n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t,params={"C_":param})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v)
ax.set_xscale("log")
ax.set(xlabel='C', ylabel='minDCFn')
ax.set_title("SVM")

fig, ax = plt.subplots()
ax.plot(param_list,actDCFn_v)
ax.set_xscale("log")
ax.set(xlabel='C', ylabel='actDCFn')
ax.set_title("SVM")

#Try different values of gamma (rbf), C=10
model="svm"

t=[0.5,1,1]

#width centered on 1(10**0)
width=10

param_list=list(map(lambda x: 10**(x-(width/2)),list(range(width))))

minDCFn_v=[]
minDCFn_v_p3=[]
minDCFn_v_g=[]

n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,t=t,params={"C_":10,"gamma_":param})
  minDCFn_v.append(minDCFn)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,prepro="pca3",t=t,params={"C_":10,"gamma_":param})
  minDCFn_v_p3.append(minDCFn)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,prepro="gauss",t=t,params={"C_":10,"gamma_":param})
  minDCFn_v_g.append(minDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v,label="raw")
ax.plot(param_list,minDCFn_v_p3,label="pca3")
ax.plot(param_list,minDCFn_v_g,label="gauss")
ax.set_xscale("log")
ax.set(xlabel='gamma', ylabel='minDCFn')
ax.legend()
ax.set_title("SVM RBF C=10")

#Try different values of gamma (rbf), C=10
model="svm"

t=[0.5,1,1]

#width centered on 1(10**0)
width=10

param_list=list(map(lambda x: 10**(x-(width/2)),list(range(width))))

minDCFn_v=[]
actDCFn_v=[]
n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t,params={"C_":10,"gamma_":param})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v)
ax.set_xscale("log")
ax.set(xlabel='gamma', ylabel='minDCFn')
ax.set_title("SVM C=10")

fig, ax = plt.subplots()
ax.plot(param_list,actDCFn_v)
ax.set_xscale("log")
ax.set(xlabel='gamma', ylabel='actDCFn')
ax.set_title("SVM C=10")

#Select gamma=1,C=10 cv for raw


model="svm"


t=[0.5,1,1]
pi_v=[0.5,0.9,0.1]

minDCFn_v_=[]
actDCFn_v=[]
minDCFn_v_g=[]
actDCFn_v_g=[]
minDCFn_v_p3=[]
actDCFn_v_p3=[]

for pi in pi_v:
  t=[pi,1,1]
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t,params={"C_":10,"gamma_":1})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,prepro="gauss",K=10,t=t,params={"C_":10,"gamma_":1})
  minDCFn_v_g.append(minDCFn)
  actDCFn_v_g.append(actDCFn)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,prepro="pca3",K=10,t=t,params={"C_":10,"gamma_":1})
  minDCFn_v_p3.append(minDCFn)
  actDCFn_v_p3.append(actDCFn)

#Print as format in report:
print(". RAW Gauss PCA3")
for i,pi in enumerate(pi_v):
  print("pi =",pi)
  print("minDCFn","%.4f" % minDCFn_v[i],"%.4f" % minDCFn_v_g[i], "%.4f" % minDCFn_v_p3[i])
  print("actDCFn","%.4f" %actDCFn_v[i],"%.4f" % actDCFn_v_g[i],"%.4f" % actDCFn_v_p3[i])

#kernel linear,C=10 cv for raw

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="gauss",model=model,K=10,t=t,params={"C_":10,"kernel_":"linear"})
print(minDCFn)
print(actDCFn)

#kernel linear,C=10 cv for PCA 3

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="pca3",model=model,K=10,t=t,params={"C_":10,"kernel_":"linear"})
print(minDCFn)
print(actDCFn)

#kernel linear,C=10 cv for gaussianization

model="svm"


t=[0.5,1,1]
pi_v=[0.5,0.9,0.1]

minDCFn_v_=[]
actDCFn_v=[]
minDCFn_v_g=[]
actDCFn_v_g=[]
minDCFn_v_p3=[]
actDCFn_v_p3=[]

for pi in pi_v:
  t=[pi,1,1]
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t,params={"C_":10,"kernel_":"linear"})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,prepro="gauss",K=10,t=t,params={"C_":10,"kernel_":"linear"})
  minDCFn_v_g.append(minDCFn)
  actDCFn_v_g.append(actDCFn)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,prepro="pca3",K=10,t=t,params={"C_":10,"kernel_":"linear"})
  minDCFn_v_p3.append(minDCFn)
  actDCFn_v_p3.append(actDCFn)

#Print as format in report:
print(". RAW Gauss PCA3")
for i,pi in enumerate(pi_v):
  print("pi =",pi)
  print("minDCFn","%.4f" % minDCFn_v[i],"%.4f" % minDCFn_v_g[i], "%.4f" % minDCFn_v_p3[i])
  print("actDCFn","%.4f" %actDCFn_v[i],"%.4f" % actDCFn_v_g[i],"%.4f" % actDCFn_v_p3[i])

#Try different values of polynomial grade (d), C=10
model="svm"

t=[0.5,1,1]

#width centered on 1(10**0)
width=10

param_list=list(range(1,11))

minDCFn_v=[]
minDCFn_v_p3=[]
minDCFn_v_g=[]

n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,t=t,params={"C_":10,"kernel_":"polynomial","d_":param,"b_":0})
  minDCFn_v.append(minDCFn)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,prepro="pca3",t=t,params={"C_":10,"kernel_":"polynomial","d_":param,"b_":0})
  minDCFn_v_p3.append(minDCFn)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,prepro="gauss",t=t,params={"C_":10,"kernel_":"polynomial","d_":param,"b_":0})
  minDCFn_v_g.append(minDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v,label="raw")
ax.plot(param_list,minDCFn_v_p3,label="pca3")
ax.plot(param_list,minDCFn_v_g,label="gauss")
ax.set(xlabel='d', ylabel='minDCFn')
ax.legend()
ax.set_title("SVM Polynomial")

#Try different values of polynomial grade (d), C=10
model="svm"

t=[0.5,1,1]

#width centered on 1(10**0)
width=10

param_list=list(range(1,11))

minDCFn_v=[]
actDCFn_v=[]
n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t,params={"C_":10,"kernel_":"polynomial","d_":param,"b_":0})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v)
#ax.set_xscale("log")
ax.set(xlabel='grade d', ylabel='minDCFn')
ax.set_title("SVM Polynomial C=10")

fig, ax = plt.subplots()
ax.plot(param_list,actDCFn_v)
#ax.set_xscale("log")
ax.set(xlabel='grade d', ylabel='actDCFn')
ax.set_title("SVM Polynomial C=10")

#kernel polynomial, d=3,b=0,C=10 cv for raw

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t,params={"C_":10,"kernel_":"polynomial","d_":2,"b_":0})
print(minDCFn)
print(actDCFn)

#kernel poly,C=10 cv for PCA 3

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="pca3",model=model,K=10,t=t,params={"C_":10,"kernel_":"linear"})
print(minDCFn)
print(actDCFn)

#kernel poly,C=10 cv for gaussianization

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="gauss",model=model,K=10,t=t,params={"C_":10,"kernel_":"linear"})
print(minDCFn)
print(actDCFn)

"""#GMM"""

gmmModel=gmm.GMM_2C(DTR,LTR,12,100)

gmmModel.run()

gmm.showGraphEst(gmmModel.models_v[0],gmmModel.models_v[0].X)

model="gmm"
#Select a working point, iterate for different values of regulazation
t=[0.5,1,1]

#Select N of components
n_comps=50

param_list=list(range(1,n_comps))

minDCFn_v=[]
actDCFn_v=[]
n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,t=t,params={"n_comp":param,"iterations":60})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)

fig, ax = plt.subplots()
ax.plot(minDCFn_v)
#ax.set_xscale("log")
ax.set(xlabel='N Components', ylabel='minDCFn')
ax.set_title("GMM")

#gmm,N=10 single fold for raw

t=[0.5,1,1]

model="gmm"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,t=t,params={"n_comp":10,"iterations":60})
print(minDCFn)
print(actDCFn)

#gmm,N=10 single fold for PCA 3

t=[0.5,1,1]

model="gmm"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,prepro="pca3",model=model,t=t,params={"n_comp":10,"iterations":60})
print(minDCFn)
print(actDCFn)

#gmm,N=10 single fold for gaussianization

t=[0.5,1,1]

model="gmm"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,prepro="gauss",model=model,t=t,params={"n_comp":10,"iterations":60})
print(minDCFn)
print(actDCFn)



"""#Evaluation

##Logistic Regression
"""

#Best hyperparameters
model="logReg"
t=[0.5,1,1]
minDCFn,_,_,actDCFn=cv.singleFold(DTR,LTR,DTE,LTE,prepro="gauss",model=model,t=t,params={"reg":0})
print(minDCFn)
print(actDCFn)

#Try different values of lamda with cross validation
model="logReg"
#Select a working point, iterate for different values of lambda
t=[0.5,1,1]

width=50

param_list=list(map(lambda x: 10**(x-(width/2)),list(range(width))))

minDCFn_v=[]
actDCFn_v=[]
minDCFn_e_v=[]
actDCFn_e_v=[]
n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,t=t,params={"reg":param})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE,LTE,model=model,t=t,params={"reg":param})
  minDCFn_e_v.append(minDCFn)
  actDCFn_e_v.append(actDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v,label="val")
ax.plot(param_list,minDCFn_e_v,"r",label="eval")
ax.legend()
ax.set_xscale("log")
ax.set(xlabel='Lambda', ylabel='minDCFn')
ax.set_title("Logistic Regression")

fig, ax = plt.subplots()
ax.plot(param_list,actDCFn_v)
ax.set_xscale("log")
ax.set(xlabel='Lambda', ylabel='actDCFn')
ax.set_title("Logistic Regression")

#Try pca 3
model="logReg"
#Select a working point, iterate for different values of lambda
t=[0.5,1,1]

minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="pca3",model=model,K=10,t=t,params={"reg":0})

#Try pca 2
model="logReg"
#Select a working point, iterate for different values of lambda
t=[0.5,1,1]

minDCFn,_,_,actDCFn= cv.cv(DTR_p2,LTR,model=model,K=10,t=t,params={"reg":0})

#Try gaussianization
model="logReg"
#Select a working point, iterate for different values of lambda
t=[0.5,1,1]

minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="gauss",model=model,K=10,t=t,params={"reg":0})

actDCFn

"""## Multivaraite Gaussian"""

#Best hyperparameters
model="gaussTied"
t=[0.5,1,1]
minDCFn,_,_,actDCFn=cv.singleFold(DTR,LTR,DTE,LTE,prepro="gauss",model=model,t=t)
print(minDCFn)
print(actDCFn)

# sf for different gaussian models

t=[0.5,1,1]
mvg_v=[]
mvg_a=[]

model="gaussFull"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE,LTE,model=model,t=t)
mvg_v.append(minDCFn)
mvg_a.append(actDCFn)

model="gaussTied"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE,LTE,model=model,t=t)
mvg_v.append(minDCFn)
mvg_a.append(actDCFn)

model="gaussNaive"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE,LTE,model=model,t=t)
mvg_v.append(minDCFn)
mvg_a.append(actDCFn)

print(mvg_v)
print(mvg_a)

# sf for pca 3

t=[0.5,1,1]
mvg_v=[]
mvg_a=[]

model="gaussFull"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE_p3,LTE,prepro="pca3",model=model,t=t)
mvg_v.append(minDCFn)
mvg_a.append(actDCFn)

model="gaussTied"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE_p3,LTE,prepro="pca3",model=model,t=t)
mvg_v.append(minDCFn)
mvg_a.append(actDCFn)

model="gaussNaive"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE_p3,LTE,prepro="pca3",model=model,t=t)
mvg_v.append(minDCFn)
mvg_a.append(actDCFn)

print(mvg_v)
print(mvg_a)

# sf for gaussianization


t=[0.5,1,1]
mvg_v=[]
mvg_a=[]

model="gaussFull"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE,LTE,prepro="gauss",model=model,t=t)
mvg_v.append(minDCFn)
mvg_a.append(actDCFn)

model="gaussTied"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE,LTE,prepro="gauss",model=model,t=t)
mvg_v.append(minDCFn)
mvg_a.append(actDCFn)

model="gaussNaive"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE,LTE,prepro="gauss",model=model,t=t)
mvg_v.append(minDCFn)
mvg_a.append(actDCFn)

print(mvg_v)
print(mvg_a)

"""##SVM"""

#Best hyperparameters
model="svm"
t=[0.5,1,1]
minDCFn,_,_,actDCFn=cv.singleFold(DTR,LTR,DTE,LTE,prepro="gauss",model=model,t=t,params={"kernel_":"rbf","C_":10,"gamma_":1})
print(minDCFn)
print(actDCFn)

#Try different values of C, for rbf kernel
model="svm"
#Select a working point, iterate for different values of regulazation
t=[0.5,1,1]

#width centered on 1(10**0)
width=20

param_list=list(map(lambda x: 10**(x-(width/2)),list(range(width))))

minDCFn_v=[]
actDCFn_v=[]
minDCFn_e_v=[]
actDCFn_e_v=[]
n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,t=t,params={"C_":param})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE,LTE,model=model,t=t,params={"C_":param})
  minDCFn_e_v.append(minDCFn)
  actDCFn_e_v.append(actDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v,label="val")
ax.plot(param_list,minDCFn_e_v,"r",label="eval")
ax.legend()
ax.set_xscale("log")
ax.set(xlabel='C', ylabel='minDCFn')
ax.set_title("SVM RBF G=10")

fig, ax = plt.subplots()
ax.plot(param_list,actDCFn_v)
ax.set_xscale("log")
ax.set(xlabel='C', ylabel='actDCFn')
ax.set_title("SVM")

#Try different values of gamma (rbf), C=10
model="svm"

t=[0.5,1,1]

#width centered on 1(10**0)
width=10

param_list=list(map(lambda x: 10**(x-(width/2)),list(range(width))))

minDCFn_v=[]
actDCFn_v=[]
minDCFn_e_v=[]
actDCFn_e_v=[]
n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,t=t,params={"C_":10,"gamma_":param})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE,LTE,model=model,t=t,params={"C_":10,"gamma_":param})
  minDCFn_e_v.append(minDCFn)
  actDCFn_e_v.append(actDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v,label="val")
ax.plot(param_list,minDCFn_e_v,"r",label="eval")
ax.legend()
ax.set_xscale("log")
ax.set(xlabel='gamma', ylabel='minDCFn')
ax.set_title("SVM RBF")

fig, ax = plt.subplots()
ax.plot(param_list,actDCFn_v)
ax.set_xscale("log")
ax.set(xlabel='gamma', ylabel='actDCFn')
ax.set_title("SVM C=10")

#Select gamma=1,C=10 cv for raw

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t,params={"C_":10,"gamma_":1})
print(minDCFn)
print(actDCFn)

#Select gamma=1,C=10 cv for pca 3

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR_p,LTR,model=model,K=10,t=t,params={"C_":10,"gamma_":1})

actDCFn

#Select gamma=1,C=10 cv for gaussianization

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="gauss",model=model,K=10,t=t,params={"C_":10,"gamma_":1})

minDCFn

#kernel linear,C=10 cv for raw

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="gauss",model=model,K=10,t=t,params={"C_":10,"kernel_":"linear"})
print(minDCFn)
print(actDCFn)

#kernel linear,C=10 cv for PCA 3

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="pca3",model=model,K=10,t=t,params={"C_":10,"kernel_":"linear"})
print(minDCFn)
print(actDCFn)

#kernel linear,C=10 cv for gaussianization

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="gauss",model=model,K=10,t=t,params={"C_":10,"kernel_":"linear"})
print(minDCFn)
print(actDCFn)

#Try different values of polynomial grade (d), C=10
model="svm"

t=[0.5,1,1]

#width centered on 1(10**0)
width=10

param_list=list(range(1,11))

minDCFn_v=[]
actDCFn_v=[]
n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t,params={"C_":10,"kernel_":"polynomial","d_":param,"b_":0})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v)
#ax.set_xscale("log")
ax.set(xlabel='grade d', ylabel='minDCFn')
ax.set_title("SVM Polynomial C=10")

fig, ax = plt.subplots()
ax.plot(param_list,actDCFn_v)
#ax.set_xscale("log")
ax.set(xlabel='grade d', ylabel='actDCFn')
ax.set_title("SVM Polynomial C=10")

#kernel polynomial, d=3,b=0,C=10 cv for raw

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,model=model,K=10,t=t,params={"C_":10,"kernel_":"polynomial","d_":2,"b_":0})
print(minDCFn)
print(actDCFn)

#kernel poly,C=10 cv for PCA 3

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="pca3",model=model,K=10,t=t,params={"C_":10,"kernel_":"linear"})
print(minDCFn)
print(actDCFn)

#kernel poly,C=10 cv for gaussianization

t=[0.5,1,1]

model="svm"
minDCFn,_,_,actDCFn= cv.cv(DTR,LTR,prepro="gauss",model=model,K=10,t=t,params={"C_":10,"kernel_":"linear"})
print(minDCFn)
print(actDCFn)

"""##GMM"""

#Best hyperparameters
model="gmm"
t=[0.5,1,1]
minDCFn,_,_,actDCFn=cv.singleFold(DTR,LTR,DTE,LTE,prepro="gauss",model=model,t=t,params={"n_comp":7,"iterations":60})
print(minDCFn)
print(actDCFn)

model="gmm"
#Select a working point, iterate for different values of regulazation
t=[0.5,1,1]

#Select N of components
n_comps=10

param_list=list(range(1,n_comps))

minDCFn_v=[]
actDCFn_v=[]
minDCFn_e_v=[]
actDCFn_e_v=[]
n_params=len(param_list)
for i,param in enumerate(param_list):
  print("\r","Parameter: ",param, " ", i,"/",n_params)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,t=t,params={"n_comp":param,"iterations":60})
  minDCFn_v.append(minDCFn)
  actDCFn_v.append(actDCFn)
  minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,DTE,LTE,model=model,t=t,params={"n_comp":param,"iterations":60})
  minDCFn_e_v.append(minDCFn)
  actDCFn_e_v.append(actDCFn)

fig, ax = plt.subplots()
ax.plot(param_list,minDCFn_v,label="val")
ax.plot(param_list,minDCFn_e_v,"r",label="eval")
ax.legend()
ax.set(xlabel='N coponents', ylabel='minDCFn')
ax.set_title("GMM")



#gmm,N=10 single fold for raw

t=[0.5,1,1]

model="gmm"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,model=model,t=t,params={"n_comp":10,"iterations":60})
print(minDCFn)
print(actDCFn)

#gmm,N=10 single fold for PCA 3

t=[0.5,1,1]

model="gmm"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,prepro="pca3",model=model,t=t,params={"n_comp":10,"iterations":60})
print(minDCFn)
print(actDCFn)

#gmm,N=10 single fold for gaussianization

t=[0.5,1,1]

model="gmm"
minDCFn,_,_,actDCFn= cv.singleFold(DTR,LTR,prepro="gauss",model=model,t=t,params={"n_comp":10,"iterations":60})
print(minDCFn)
print(actDCFn)